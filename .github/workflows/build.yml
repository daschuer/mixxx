# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: Build

on:
  workflow_call:

permissions:
  contents: read #  to fetch code (actions/checkout)

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu 24.04
            os: ubuntu-24.04
            cmake_args: >-
              -DQT6=ON
              -DQML=ON
              -DBULK=ON
              -DFFMPEG=ON
              -DLOCALECOMPARE=ON
              -DMAD=ON
              -DMODPLUG=ON
              -DWAVPACK=ON
              -DINSTALL_USER_UDEV_RULES=OFF
            ctest_args: []
            compiler_cache: ccache
            compiler_cache_path: /home/runner/.cache/ccache
            compiler_cache_id: qt6
            cpack_generator: DEB
            buildenv_basepath: /home/runner/buildenv
            buildenv_script: tools/debian_buildenv.sh
            artifacts_name: Ubuntu 24.04 Qt6 DEB
            artifacts_path: build/*.deb
            artifacts_slug: ubuntu-jammy
            qt_qpa_platform: offscreen
          - name: macOS 13 x64
            os: macos-13
            cmake_args: >-
              -DBULK=ON
              -DCOREAUDIO=ON
              -DHSS1394=ON
              -DMACOS_BUNDLE=ON
              -DMODPLUG=ON
              -DQT6=ON
              -DQML=OFF
              -DWAVPACK=ON
              -DVCPKG_TARGET_TRIPLET=x64-osx-min1100-release
              -DVCPKG_DEFAULT_HOST_TRIPLET=x64-osx-min1100-release
            # TODO: Fix this broken test on macOS
            ctest_args: --exclude-regex DirectoryDAOTest.relocateDirectory
            cpack_generator: DragNDrop
            compiler_cache: ccache
            compiler_cache_path: /Users/runner/Library/Caches/ccache
            compiler_cache_id: x64
            buildenv_basepath: /Users/runner/buildenv
            buildenv_script: tools/macos_release_buildenv.sh
            artifacts_name: macOS Intel DMG
            artifacts_path: build/*.dmg
            artifacts_slug: macos-macosintel
            qt_qpa_platform: offscreen
          - name: macOS 13 arm64
            os: macos-13
            cmake_args: >-
              -DBULK=ON
              -DCOREAUDIO=ON
              -DHSS1394=ON
              -DMACOS_BUNDLE=ON
              -DMODPLUG=ON
              -DQT6=ON
              -DQML=ON
              -DWAVPACK=ON
              -DVCPKG_TARGET_TRIPLET=arm64-osx-min1100-release
              -DVCPKG_DEFAULT_HOST_TRIPLET=x64-osx-min1100-release
            # TODO: Fix this broken test on macOS
            crosscompile: true
            cpack_generator: DragNDrop
            compiler_cache: ccache
            compiler_cache_path: /Users/runner/Library/Caches/ccache
            compiler_cache_id: arm64
            buildenv_basepath: /Users/runner/buildenv
            buildenv_script: tools/macos_arm64-cross-release_buildenv.sh
            artifacts_name: macOS ARM DMG
            artifacts_path: build/*.dmg
            artifacts_slug: macos-macosarm
            qt_qpa_platform: offscreen
          - name: Windows 2022 x64
            os: windows-2022
            # Attention: If you change the cmake_args for the Windows CI build,
            #            also adjust the for the local Windows build setup in
            #            ./tools/windows_buildenv.bat
            cmake_args: >-
              -DBULK=ON
              -DHSS1394=ON
              -DLOCALECOMPARE=ON
              -DMAD=ON
              -DMEDIAFOUNDATION=ON
              -DMODPLUG=ON
              -DQT6=ON
              -DQML=ON
              -DWAVPACK=ON
              -DVCPKG_TARGET_TRIPLET=x64-windows-release
              -DVCPKG_DEFAULT_HOST_TRIPLET=x64-windows-release
            cc: cl
            cxx: cl
            # TODO: Fix these broken tests on Windows
            ctest_args: --exclude-regex '^AutoDJProcessorTest.*$'
            cpack_generator: WIX
            buildenv_basepath: C:\buildenv
            buildenv_script: tools/windows_buildenv.bat
            artifacts_name: Windows x64 Installer
            artifacts_path: build/*.msi
            artifacts_slug: windows-win64
            qt_qpa_platform: windows
            arch: x64
          - name: Windows 11 ARM64
            os: windows-11-arm
            # Attention: If you change the cmake_args for the Windows CI build,
            #            also adjust the for the local Windows build setup in
            #            ./tools/windows_buildenv.bat
            cmake_args: >-
              -DBULK=ON
              -DHSS1394=ON
              -DLOCALECOMPARE=ON
              -DMAD=ON
              -DMEDIAFOUNDATION=ON
              -DMODPLUG=ON
              -DQT6=ON
              -DQML=ON
              -DWAVPACK=ON
              -DVCPKG_TARGET_TRIPLET=arm64-windows-release
              -DVCPKG_DEFAULT_HOST_TRIPLET=arm64-windows-release
            cc: cl
            cxx: cl
            # TODO: Fix these broken tests on Windows
            ctest_args: --exclude-regex '^AutoDJProcessorTest.*$'
            cpack_generator: WIX
            buildenv_basepath: C:\buildenv
            buildenv_script: tools/windows_buildenv.bat
            artifacts_name: Windows ARM64 Installer
            artifacts_path: build/*.msi
            artifacts_slug: windows-winarm
            qt_qpa_platform: windows
            arch: arm64

    env:
      # macOS codesigning
      MACOS_CODESIGN_CERTIFICATE_P12_BASE64: ${{ secrets.MACOS_CODESIGN_CERTIFICATE_P12_BASE64 }}
      MACOS_CODESIGN_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CODESIGN_CERTIFICATE_PASSWORD }}

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    container: ${{ matrix.container }}
    outputs:
      artifact-macos-macosintel: ${{ steps.prepare_deploy.outputs.artifact-macos-macosintel }}
      artifact-macos-macosarm: ${{ steps.prepare_deploy.outputs.artifact-macos-macosarm }}
      artifact-windows-win64: ${{ steps.prepare_deploy.outputs.artifact-windows-win64 }}
      artifact-windows-winarm: ${{ steps.prepare_deploy.outputs.artifact-windows-winarm }}
    steps:
      - name: Copy notepad.exe to workspace
        if: runner.os == 'Windows'
        run: |
          copy C:\Windows\System32\notepad.exe "${{ github.workspace }}\notepad.exe"
        shell: cmd

      - name: "[Windows] Sign executables"
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        if: runner.os == 'Windows' && env.AZURE_TENANT_ID
        uses: azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://weu.codesigning.azure.net/
          trusted-signing-account-name: mixxx
          certificate-profile-name: mixxx
          files-folder: ${{ github.workspace }}
          files-folder-filter: exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256
          timeout: 600

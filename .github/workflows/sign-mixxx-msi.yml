name: Sign mixxx.msi

on:
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: "Enter the id of the workflow run that has creates the unsigned exe"
        required: true
      signed_digest:
        description: "Enter signed digest, bas64 encoded"
        required: true

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: Print status
        run: |
          echo "Signing workflow ${{ github.event.inputs.workflow_run_id }} with"
          echo "${{ github.event.inputs.signed_digest }}"

      - name: Download unsigned msi
        uses: actions/download-artifact@v4
        with:
          name: unsigned msi
          path: build
          run-id: ${{ github.event.inputs.workflow_run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Display structure of downloaded files
        run: ls

      - name: Sign mixxx.exe
        run: |
          $DigestFile = Get-ChildItem -Path 'build/*.msi.dig' | Select-Object -First 1 -ExpandProperty FullName
          Write-Host "ProjectName: $DigestFile"
          "${{ github.event.inputs.signed_digest }}" | Out-File -FilePath $DigestFile.signed -Encoding ASCII
          signtool sign /di build build/mixxx-*.msi
          signtool timestamp /tr http://time.certum.pl /td sha256 build/mixxx-*.msi
          SignTool verify /v /pa build/mixxx-*.msi

      - name: "Prepare for deployment"
        # Copy the desired directory structure to the deploy/ directory. This
        # also generates metadata for file artifact and write it to the job
        # output using the artifacts_slug value.
        id: prepare_deploy
        shell: bash
        run: >
          if [[ "${GITHUB_REF}" =~ ^refs/tags/.* ]];
          then
            export DEPLOY_PATH='releases/{git_describe}/mixxx-{git_describe}-{package_slug}{ext}';
          else
            export DEPLOY_PATH='snapshots/{git_branch}/mixxx-{git_describe}-{package_slug}{ext}';
          fi;
          python3 tools/deploy.py prepare-deployment
          --slug '${{ matrix.artifacts_slug }}'
          --output-dir 'deploy/'
          --dest-path "${DEPLOY_PATH}"
          --dest-url 'https://downloads.mixxx.org'
          ${{ matrix.artifacts_path }}

      - name: "[Windows] Install rsync and openssh"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY }}
        if: runner.os == 'Windows' && github.event_name == 'push' && env.SSH_PRIVATE_KEY != null
        run: |
          $Env:PATH="c:\msys64\usr\bin;$Env:PATH"
          pacman -S --noconfirm coreutils bash rsync openssh
          # Unfortunately, mixing executables from msys64 and mingw (i.e. Git
          # Bash) does not work properly and leads to errors like these:
          #
          #     0 [main] python3 (5248) C:\msys64\usr\bin\python3.exe: *** fatal error - cygheap base mismatch detected - 0x180347408/0x180352408.
          #
          # Even when prepending the MSYS2 binary directory to %PATH%, GitHub
          # Actions will still pick the Git Bash executable over the MSYS2 one
          # when using `shell: bash`. Since it's not feasible to set `shell` to
          # an absolute path in a cross-platform build workflow, we overwrite the
          # git bash executable with the MSYS2 one.
          #
          # Also see related issue:
          # https://github.com/actions/virtual-environments/issues/594
          Copy-Item -Path "C:\msys64\usr\bin\bash.exe" -Destination "C:\Program Files\Git\bin\bash.exe" -Force
          # By default, MSYS2 uses an
          # /etc/profile file that changes
          # the current working directory
          # when bash is started. We don't
          # want this behavior,so we just
          # delete it.
          Remove-Item -Path "C:\msys64\etc\profile"
          # Add MSYS2's tools to %PATH%.
          Add-Content -Path "$Env:GITHUB_ENV" -Value "PATH=$Env:PATH"

      - name: "Set up SSH Agent"
        if: github.event_name == 'push' && env.SSH_PRIVATE_KEY != null
        shell: bash
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          SSH_PRIVATE_KEY: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY }}
          SSH_HOST: downloads-hostgator.mixxx.org
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${SSH_PRIVATE_KEY}"
          mkdir -p "${HOME}/.ssh"
          ssh-keyscan "${SSH_HOST}" >> "${HOME}/.ssh/known_hosts"
          echo "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}" >> "${GITHUB_ENV}"

      - name: "[macOS/Windows] Upload build to downloads.mixxx.org"
        # skip deploying Ubuntu builds to downloads.mixxx.org because these are deployed to the PPA
        if: runner.os != 'Linux' && github.event_name == 'push' && env.SSH_AUTH_SOCK != null
        shell: bash --login -eo pipefail "{0}"
        run: rsync --verbose --recursive --checksum --times --delay-updates "deploy/" "${SSH_USER}@${SSH_HOST}:${DESTDIR}/"
        env:
          DESTDIR: public_html/downloads
          SSH_HOST: downloads-hostgator.mixxx.org
          SSH_USER: mixxx

#!/bin/python3

import os
import re


source_directory = "../src"
output_header_file = "../src/library_pch.h"


def collect_angle_bracket_includes(directory):
    angle_bracket_includes = set()
    cpp_files = [
        os.path.join(dirpath, filename)
        for dirpath, _, files in os.walk(directory)
        for filename in files
        if filename.endswith(".cpp") or filename.endswith(".h")
    ]

    # Regex pattern to match #include <...>
    include_pattern = re.compile(r"#include\s+<([^>]*)>")

    # Collect angle bracket includes from each file
    for file_path in cpp_files:
        with open(file_path, "r") as file:
            contents = file.read()
            includes = include_pattern.findall(contents)
            angle_bracket_includes.update(includes)

    return sorted(angle_bracket_includes)


def write_to_header_file(includes, output_file):
    with open(output_file, "w") as header_file:
        header_file.write("#pragma once\n\n")
        header_file.write("// Generated by ../tools/make_library_pch.py\n\n")
        header_file.write("// clang-format off\n")
        for include in includes:
            header_file.write(f"#include <{include}>\n")


includes = collect_angle_bracket_includes(source_directory)
write_to_header_file(includes, output_header_file)
